import {  createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';


export const fetchProducts = createAsyncThunk(
    'products/fetchAllProducts',
    async () => {
      const response = await axios.get("http://localhost:4000/products/")
      return response.data
    }
  )
  export const addProduct = createAsyncThunk(
    'addProduct/fetchAddedProduct',
    async (detail) => {
      console.log(detail)
        const response = await axios.post("http://localhost:4000/products/addProduct",detail)
      return response.data
    }
  )
  export const deleteProduct = createAsyncThunk(
    'deleteProduct/fetchDeletedProductId',
    async (id) => {
      console.log(id)
        const response = await axios.delete(`http://localhost:4000/products/deleteProduct/${id}`)
      console.log(response)
        return response.data
    }
  )
const initialState = {
    items: [],
    error:"",
    price: 0,
}
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
 const counterSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        
        increment:()=>{

      },
      decrement:()=>{

      },
      purchase:()=>{

      }
    },
    extraReducers:{
        [fetchProducts.fulfilled.type]: (state, action) => {
           console.log(action.payload.products)
           state.items = []
            state.items.push(action.payload.products);
            state.items[0].forEach((product)=>{
                 state.price += Number(product.price)
            })
          },
          [fetchProducts.rejected.type]: (state, action) => {
            state.error = action.payload;
            
          },
          [addProduct.fulfilled.type]: (state, action) => {
            console.log(action.payload)
             
           },
           [addProduct.rejected.type]: (state, action) => {
             state.error = action.payload;
             
           },
           [deleteProduct.fulfilled.type]: (state, action) => {
            console.log(action.meta.arg)
            const id = action.meta.arg;
            const data = state.items[0].filter((detail) => detail && (String(detail._id) !== action.meta.arg));
                  const deletedProduct = state.items[0].filter((detail) => detail && (String(detail._id) === id));
                      console.log(deleteProduct);
                   
                      state.items[0] = data;
                      state.price = 0 
                      state.items[0].forEach((product)=>{
                        state.price += Number(product.price)
                   })

                     // state.price -= Number(deleteProduct.price)
           },
           [deleteProduct.rejected.type]: (state, action) => {
             state.error = action.payload;
             
           },
           
    }
   
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
 });

export const { increment, decrement, purchase} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//console.log(selectCount);
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default counterSlice.reducer;
